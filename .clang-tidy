# https://clang.llvm.org/extra/clang-tidy/index.html
# https://clang.llvm.org/extra/clang-tidy/checks/list.html
# https://clang.llvm.org/docs/ExternalClangExamples.html

#WarningsAsErrors: '*'
HeaderFilterRegex: '.*\.hpp'
FormatStyle: file   # use .clang-format
Checks: >
  cppcoreguidelines-*,
  modernize-*,
  performance-*,
  misc-*,
  readability-*,
  -clang-diagnostic-error,
# google-*,
# bugprone-*,
# concurrency-*,
# cert-*,
# -*,
# cppcoreguidelines-*,
# -cppcoreguidelines-avoid-capturing-lambda-coroutines,
# -cppcoreguidelines-avoid-const-or-ref-data-members,
# -cppcoreguidelines-avoid-do-while,
# -cppcoreguidelines-avoid-goto,
# -cppcoreguidelines-avoid-non-const-global-variables,
# -cppcoreguidelines-avoid-reference-coroutine-parameters,
# -cppcoreguidelines-avoid-c-arrays,
# -cppcoreguidelines-avoid-magic-numbers,
# -cppcoreguidelines-init-variables,
# -cppcoreguidelines-interfaces-global-init,
# -cppcoreguidelines-macro-usage,
# -cppcoreguidelines-misleading-capture-default-by-value,
# -cppcoreguidelines-missing-std-forward,
# -cppcoreguidelines-no-malloc,
# -cppcoreguidelines-no-suspend-with-lock,
# -cppcoreguidelines-owning-memory,
# -cppcoreguidelines-prefer-member-initializer,
# -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
# -cppcoreguidelines-pro-bounds-constant-array-index,
# -cppcoreguidelines-pro-bounds-pointer-arithmetic,
# -cppcoreguidelines-pro-type-const-cast,
# -cppcoreguidelines-pro-type-cstyle-cast,
# -cppcoreguidelines-pro-type-member-init,
# -cppcoreguidelines-pro-type-reinterpret-cast,
# -cppcoreguidelines-pro-type-static-cast-downcast,
# -cppcoreguidelines-pro-type-union-access,
# -cppcoreguidelines-pro-type-vararg,
# -cppcoreguidelines-rvalue-reference-param-not-moved,
# -cppcoreguidelines-slicing,
# -cppcoreguidelines-special-member-functions,
# -cppcoreguidelines-virtual-class-destructor,
# modernize-*,
# -modernize-avoid-bind,
# -modernize-avoid-c-arrays,
# -modernize-concat-nested-namespaces,
# -modernize-deprecated-headers,
# -modernize-deprecated-ios-base-aliases,
# -modernize-loop-convert,
# -modernize-macro-to-enum,
# -modernize-make-shared,
# -modernize-make-unique,
# -modernize-min-max-use-initializer-list,
# -modernize-pass-by-value,
# -modernize-raw-string-literal,
# -modernize-redundant-void-arg,
# -modernize-replace-auto-ptr,
# -modernize-replace-disallow-copy-and-assign-macro,
# -modernize-replace-random-shuffle,
# -modernize-return-braced-init-list,
# -modernize-shrink-to-fit,
# -modernize-type-traits,
# -modernize-unary-static-assert,
# -modernize-use-auto,
# -modernize-use-bool-literals,
# -modernize-use-constraints,
# -modernize-use-default-member-init,
# -modernize-use-designated-initializers,
# -modernize-use-emplace,
# -modernize-use-equals-default,
# -modernize-use-equals-delete,
# -modernize-use-integer-sign-comparison,
# -modernize-use-nodiscard,
# -modernize-use-noexcept,
# -modernize-use-nullptr,
# -modernize-use-override,
# -modernize-use-ranges,
# -modernize-use-starts-ends-with,
# -modernize-use-std-format,
# -modernize-use-std-numbers,
# -modernize-use-std-print,
# -modernize-use-trailing-return-type,
# -modernize-use-transparent-functors,
# -modernize-use-uncaught-exceptions,
# -modernize-use-using,
# performance-*,
# -performance-avoid-endl,
# -performance-enum-size,
# -performance-faster-string-find,
# -performance-for-range-copy,
# -performance-implicit-conversion-in-loop,
# -performance-inefficient-algorithm,
# -performance-inefficient-string-concatenation,
# -performance-inefficient-vector-operation,
# -performance-move-const-arg,
# -performance-move-constructor-init,
# -performance-no-automatic-move,
# -performance-no-int-to-ptr,
# -performance-noexcept-destructor,
# -performance-noexcept-move-constructor,
# -performance-noexcept-swap,
# -performance-trivially-destructible,
# -performance-type-promotion-in-math-fn,
# -performance-unnecessary-copy-initialization,
# -performance-unnecessary-value-param,
# misc-*,
# -misc-confusable-identifiers,
# -misc-const-correctness,
# -misc-coroutine-hostile-raii,
# -misc-definitions-in-headers,
# -misc-header-include-cycle,
# -misc-include-cleaner,
# -misc-misleading-bidirectional,
# -misc-misleading-identifier,
# -misc-misplaced-const,
# -misc-new-delete-overloads,
# -misc-no-recursion,
# -misc-non-copyable-objects,
# -misc-non-private-member-variables-in-classes,
# -misc-redundant-expression,
# -misc-static-assert,
# -misc-throw-by-value-catch-by-reference,
# -misc-unconventional-assign-operator, 
# -misc-uniqueptr-reset-release,
# -misc-unused-alias-decls,
# -misc-unused-parameters,
# -misc-unused-using-decls,
# -misc-use-anonymous-namespace, 
# -misc-use-internal-linkage,
# readability-*,
# -readability-ambiguous-smartptr-reset-call,
# -readability-avoid-const-params-in-decls,
# -readability-avoid-nested-conditional-operator,
# -readability-avoid-return-with-void-value,
# -readability-avoid-unconditional-preprocessor-if,
# -readability-braces-around-statements,
# -readability-const-return-type,
# -readability-container-contains,
# -readability-container-data-pointer,
# -readability-container-size-empty,
# -readability-convert-member-functions-to-static,
# -readability-delete-null-pointer,
# -readability-duplicate-include,
# -readability-else-after-return,
# -readability-enum-initial-value,
# -readability-function-cognitive-complexity,
# -readability-function-size,
# -readability-identifier-length,
# -readability-identifier-naming,
# -readability-implicit-bool-conversion,
# -readability-inconsistent-declaration-parameter-name,
# -readability-isolate-declaration,
# -readability-magic-numbers,
# -readability-make-member-function-const,
# -readability-math-missing-parentheses,
# -readability-misleading-indentation,
# -readability-misplaced-array-index,
# -readability-named-parameter,
# -readability-non-const-parameter,
# -readability-operators-representation,
# -readability-qualified-auto,
# -readability-redundant-access-specifiers,
# -readability-redundant-casting,
# -readability-redundant-control-flow,
# -readability-redundant-declaration,
# -readability-redundant-function-ptr-dereference,
# -readability-redundant-inline-specifier,
# -readability-redundant-member-init,
# -readability-redundant-preprocessor,
# -readability-redundant-smartptr-get,
# -readability-redundant-string-cstr,
# -readability-redundant-string-init,
# -readability-simplify-boolean-expr,
# -readability-simplify-subscript-expr,
# -readability-static-accessed-through-instance,
# -readability-static-definition-in-anonymous-namespace,
# -readability-string-compare
# -readability-suspicious-call-argument,
# -readability-uniqueptr-delete-release,
# -readability-uppercase-literal-suffix,
# -readability-use-anyofallof,
# -readability-use-std-min-max,
# google-*,
# -google-build-explicit-make-pair,
# -google-build-namespaces,
# -google-build-using-namespace,
# -google-default-arguments,
# -google-explicit-constructor,
# -google-global-names-in-headers,
# -google-readability-avoid-underscore-in-googletest-name,
# -google-readability-casting,
# -google-readability-todo,
# -google-runtime-int,
# -google-runtime-operator,
# -google-upgrade-googletest-case,
# -clang-diagnostic-error,
#
CheckOptions:
  readability-identifier-naming.ClassCase: CamelCase
  readability-identifier-naming.EnumCase: CamelCase
  readability-identifier-naming.NamespaceCase: CamelCase
  readability-identifier-naming.StructCase: CamelCase
  readability-identifier-naming.VariableCase: CamelCase
